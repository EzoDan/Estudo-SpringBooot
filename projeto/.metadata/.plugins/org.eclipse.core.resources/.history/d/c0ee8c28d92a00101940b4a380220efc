package br.com.teste.projeto.controller;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
 
import br.com.teste.projeto.model.Employee;
import br.com.teste.projeto.services.EmployeeServiceImpl;

@Controller
public class EmployeeController {
 
    @Autowired
    private EmployeeServiceImpl employeeServiceImpl;
 
    @GetMapping("/")
    public String viewHomePage(Model model) {
        model.addAttribute("allemplist", employeeServiceImpl.getAllEmployee());
        return "index";
    }
 
    @GetMapping("/addnew")
    public String addNewEmployee(Model model) {
        Employee employee = new Employee();
        model.addAttribute("employee", employee);
        return "newemployee";
    }
 
    @PostMapping("/save")
    public String saveEmployee(@ModelAttribute("employee") Employee employee) {
        employeeServiceImpl.save(employee);
        return "redirect:/";
    }
 
    @GetMapping("/showFormForUpdate/{id}")
    public String updateForm(@PathVariable(value = "id") long id, Model model) {
        Employee employee = employeeServiceImpl.getById(id);
        model.addAttribute("employee", employee);
        return "/";
    }
 
    @GetMapping("/deleteEmployee/{id}")
    public String deleteThroughId(@PathVariable(value = "id") long id) {
        employeeServiceImpl.deleteViaId(id);
        return "redirect:/";
 
    }
}


/*
 * This is the controller class it basically controls the flow of the data. It controls the data flow into model object and updates the view whenever data changes. So here we are mapping our object data with Thymeleaf. 

When user type the URL localhost:8080/ on browser than request goes to the viewHomePage() method and in this method we are fetching the list of
employee and added it into the modal with key, value pair and return the index.html page. In index.html page the key (allemplist) is identified as
a java object and Thymeleaf iterate over the list and generate dynamic content as per the user provided template.

/addNew –  when user clicks on Add Employee button than request goes to addNewEmployee() method. And in this method we simply create the empty 
 object of the employee and send it back to newemployee.html so that user can fill the data in this empty object and when user hits on save 
 button than 
 * 
 /save mapping runs and get the object of the employee and save that object into database.
 * 
/showFormForUpdate/{id} – This mapping is for updating the existing employee data.
 *
/deleteEmployee/{id} – This mapping is for deleting the existing employee data.
 * 
 */